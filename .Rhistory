doc201$GEO.display.label=as.character(doc201$GEO.display.label)
doc201$GEO.display.label[1773] = "Dona Ana County, New Mexico"
doc201$GEO.display.label = gsub("Parish", "County", doc201$GEO.display.label)
doc202 = read.csv("http://www.stat.berkeley.edu/users/nolan/data/Project2012/census2010/DP02.csv")
doc202 = doc202[-(68:96),3:ncol(doc202)] # no alaska
doc202 = doc202[,-(2:3)]
doc202$GEO.display.label = as.character(doc202$GEO.display.label)
doc202$GEO.display.label[1803-29-1] = "Dona Ana County, New Mexico"
doc202$GEO.display.label = gsub("Parish", "County", doc202$GEO.display.label)
NewNames = character()
for(name in colnames(doc202)){
if(name == "GEO.display.label"){
newName = name
}else{
newName = paste("household_", name, sep = "")
}
NewNames = c(NewNames, newName)
}
colnames(doc202) = NewNames
doc203 = read.csv("http://www.stat.berkeley.edu/users/nolan/data/Project2012/census2010/DP03.csv")[1:3139,] #no puerto
doc203 = doc203[-(68:96),3:ncol(doc203)] # no alaska
doc203 = doc203[,-(2:3)]
doc203$GEO.display.label = as.character(doc202$GEO.display.label)
doc203$GEO.display.label[1803-29-1] = "Dona Ana County, New Mexico"
doc203$GEO.display.label = gsub("Parish", "County", doc203$GEO.display.label)
NewNames = character()
for(name in colnames(doc203)){
if(name == "GEO.display.label"){
newName = name
}else{
newName = paste("employ_", name, sep = "")
}
NewNames = c(NewNames, newName)
}
colnames(doc203) = NewNames
second = merge(doc201, doc202, by.x = "GEO.display.label", by.y = "GEO.display.label")
second = merge(second, doc203, by.x = "GEO.display.label", by.y = "GEO.display.label")
colnames(second)[1] = "county"
#doc3
doc3 = xmlParse("http://www.stat.berkeley.edu/users/nolan/data/Project2012/counties.gml")
latitude = as.numeric(xpathSApply(doc3,"//gml:X",xmlValue))/1000000
long = as.numeric(xpathSApply(doc3,"//gml:Y",xmlValue))/1000000
county = xpathSApply(doc3,"/doc/state/county/gml:name",xmlValue)
county1 = xpathSApply(doc3,"//gml:name",xmlValue)
state = xpathSApply(doc3,"/doc/state/gml:name",xmlValue)
rept = numeric()
for(i in 1:length(state)){
if(i<length(state)){
rept = c(rept, which(state[i+1]==county1)-which(state[i]==county1)-1)
}else{
rept = c(rept, length(county1) - which(state[i]==county1))
}
}
state = gsub("\n   ","",state)
state = tolower(state)
state = sapply(state, simpleCap)
state = rep(state, rept)
county = gsub("\n    ","",county)
county = paste(county, ", ",sep = "")
county = paste(county, state, sep="")
county = gsub("Parish", "County", county)
third = data.frame("county"=county, "latitude"=latitude, "longitude"=long)
#merging 3 resources
combinedData = merge(first, second, by.x = "county", by.y = "county", all.x = T)
combinedData = merge(third, combinedData, by.x = "county", by.y = "county", all.y = T)
colnames(combinedData)[4] = "winParty12"
colnames(combinedData)[7] = "majorRace"
#STEP3
# Hao Huang worked on rpart() of step3, assisted by Shiyun Shao
# Qi Zhou leads the other two members worked on knn() of step3
# we all worked on manipulating 2004 data
data2004 = read.table("http://www.stat.berkeley.edu/~nolan/data/Project2012/countyVotes2004.txt")
#bush == GOP kerry == DEM
colnames(data2004) = c("countyName", "GOP", "DEM")
data2004 = data2004[-1,]
#manipulate county names
for(i in 1:nrow(data2004)){
row = data2004[i,]
countyColumn = as.character(data2004$countyName[i])
state = unlist(strsplit(countyColumn, "[,]"))[1]
c = unlist(strsplit(countyColumn, "[,]"))[2]
result = paste(simpleCap(c), " County, ", sep="")
result = paste(result, simpleCap(state), sep="")
data2004$NewCountyName[i] = result
}
#add winParty column
for(i in 1:nrow(data2004)){
row = data2004[i,]
if ( as.numeric(as.character(data2004$GOP[i])) >= as.numeric(as.character(data2004$DEM[i]))){
win = "GOP"
}else{
win = "DEM"
}
data2004$winParty[i] = win
}
data2004 = data2004[,-1]
data2004 = data2004[c(3,4,1,2)]
colnames(data2004) = c("county", "winParty04", "voteGOP04", "voteDEM04")
data04and12 = merge(data2004, combinedData, by.x = "county", by.y = "county", all.x = T)
data04and12 = data04and12[-2376,]
data04and12 = data04and12[-275,]
matrix = data04and12[complete.cases(data04and12),]
electionResult2012 = data.frame(matrix[,7])
colnames(electionResult2012) = "electionResult2012"
matrix = matrix[,-7]
matrixvote = matrix[,c(1,3,4,7,8)]
variables = c("county", "winParty04", "latitude", "longitude",
"household_HC03_VC134","household_HC03_VC94",
"household_HC03_VC168","household_HC03_VC40","household_HC03_VC18",
"employ_HC03_VC13","employ_HC03_VC75","employ_HC03_VC156",
"employ_HC03_VC166","employ_HC03_VC31","employ_HC03_VC59")
matrix = matrix[, variables]
colnames(matrix) = c("county", "winParty04", "latitude", "longitude",
"Foreign born",
"Education degree",
"Language",
"Divorced Males",
"Elders",
"Unemployed",
"Income",
"Poverty level all families",
"Poverty level all people",
"Commuting to Work",
"Job industry"
)
#rpart
matrix$winParty04 = as.factor(matrix$winParty04)
matrix = matrix[,-1]
rpartmodel = rpart(winParty04~., method = "class", data = matrix)
# quartz(width = 7, height = 7)
png("rpartplot1.png", width = 1500, height = 1000)
plot(rpartmodel, uniform=TRUE)
text(rpartmodel, use.n=TRUE, all=TRUE)
dev.off()
rpartSummary = summary(rpartmodel)
rpartpredicted = predict(rpartmodel)
#knn
knnpredicted = list()
for(i in 1:100){
knnpredicted[[i]] = knn(matrix[,2:ncol(matrix)], matrix[,2:ncol(matrix)], matrix$winParty04, k=i)
}
trueResult = as.vector(electionResult2012)
errs = numeric()
for(i in 1:100){
assess = table(knnpredicted[[i]], electionResult2012[,1])
errs[i] = (assess[1,2] + assess[2, 1]) / length(electionResult2012[,1])
}
#STEP4
#knnplot1
png("knnplot1.png", width = 1500, height = 1000)
plot(1:100, errs, pch = 19, cex =0.7, main = "KNN Errors from different K Value (1 to 100)",
xlab = "K Value", ylab = "KNN Errors")
dev.off()
#rpartImportance
png("rpartImportance.png", width = 1000, height = 800)
x = c(19,18,17,14,9,8,5,5,2,1,1,1,1)
barplot(x, xlab = "variable predictors", ylab = "importance", main = "Importance of rpart variable predictors", names.arg=c("var1", "var2","var3","var4","var5","var6","var7","var8","var9",
"var10","var11","var12","var13"), las = 1, space = 10, ylim = c(0, 20), col = "red")
text(100,19,"var1: Percent; COMMUTING TO WORK - Public transportation")
text(90,19-0.8,"var2: PERCENTAGE OF FAMILIES AND PEOPLE INCOME BELOW THE POVERTY LEVEL - All families")
text(100,19-0.8*2,"var3: latitude")
text(90,19-0.8*3,"var4: PERCENTAGE OF FAMILIES AND PEOPLE INCOME BELOW THE POVERTY LEVEL - All people")
text(100,19-0.8*4,"var5: Percent Unemployed")
text(100,19-0.8*5,"var6: Percent INCOME AND BENEFITS Less than $10,000")
text(100,19-0.8*6,"var7: longitude")
text(100,19-0.8*7,"var8: Percent bachelor's degree or higher")
text(100,19-0.8*8,"var9: Percent; LANGUAGE SPOKEN AT HOME other than English")
text(100,19-0.8*9,"var10: Percent; PLACE OF BIRTH - Foreign born")
text(100,19-0.8*10,"var11: Percent; Households with one or more people 65 years and over")
text(100,19-0.8*11,"var12: Percent; INDUSTRY - Educational services, and health care and social assistance")
text(100,19-0.8*12,"var13: Percent; Divorced - Males 15 years and over")
dev.off()
#get votes
matrixvote[,2:5] = apply(matrixvote[,2:5], 2, as.numeric)
GOPdiff = matrixvote$voteGOP12 - matrixvote$voteGOP04
DEMdiff = matrixvote$voteDEM12 - matrixvote$voteDEM04
resultdiff = data.frame(1:nrow(matrixvote),1:nrow(matrixvote))
colnames(resultdiff) = c("winParty", "diff")
for(i in 1:nrow(matrixvote)){
if(abs(GOPdiff[i]) > abs(DEMdiff[i])){
resultdiff$diff[i] = GOPdiff[i]
resultdiff$winParty[i] = "GOP"
}else{
resultdiff$diff[i] = DEMdiff[i]
resultdiff$winParty[i] = "DEM"
}
}
resultdiff = cbind(matrixvote$county, resultdiff, matrix[,2:3])
View(resultdiff)
View(rpartpredicted)
View(trueResult)
View(electionResult2012)
class(trueResult)
View(trueResult)
trueResult == electionResult2012
trueResult == "GOP"
sum(trueResult == "GOP")
sum(trueResult == "DEM")
predictedresult = character(2808)
for(i in nrow(rpartpredicted)){
if(rpartpredicted[i,1] > rpartpredicted[i,2]){
predictedresult[i] = "DEM"
}else{
predictedresult[i] = "GOP"
}
}
predictedresult
rpartpredicted[1,1]
rpartpredicted[1,2]
predictedresult[1] = "GOP"
predictedresult
sum(trueResult == predictedresult)
predictedresult = character(2808)
for(i in 1:nrow(rpartpredicted)){
if(rpartpredicted[i,1] > rpartpredicted[i,2]){
predictedresult[i] = "DEM"
}else{
predictedresult[i] = "GOP"
}
}
sum(trueResult == predictedresult)
rparterror = sum(trueResult == predictedresult)/2808
rparterror = 1 - sum(trueResult == predictedresult)/2808
# Group Name: WeTheDragons
# Group members:
# Zhou, Qi
# Huang, Hao
# Shao, Shiyun
# Lin, Wei
# Xue, Peng
library(XML)
library(rpart)
library(class)
library(maps)
#STEP2
#doc1
state=read.csv("http://www.stat.berkeley.edu/users/nolan/data/Project2012/countyVotes2012/stateNames.txt")
state=as.character(state[-2,])
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
getPopulation=function(xmlfile, state){
county = xpathSApply(xmlfile,"//th[@class='results-county']",xmlValue)
county = gsub(" 100.0% Reporting","",county)
county = county[-1]
county = paste(county, " County, ", sep="")
county = paste(county, state, sep="")
candidate = xpathSApply(xmlfile,"//th[@class='results-candidate']",xmlValue)
candidate = candidate[-1]
popular = xpathSApply(xmlfile,"//td[@class='results-popular']",xmlValue)
popular = as.numeric(gsub(",","",popular))
voteDEM12=popular[candidate=="B. Obama (i)"]
voteGOP12=popular[candidate=="M. Romney"]
party=character()
for(i in 1:length(county)){
if(voteDEM12[i]>voteGOP12[i]){
party[i]="DEM"
}else{
party[i]="GOP"
}
}
return(cbind(county, party, voteDEM12, voteGOP12))
}
doc1 = xmlParse("http://www.stat.berkeley.edu/~nolan/data/Project2012/countyVotes2012/alabama.xml")
first = getPopulation(doc1,"Alabama")
updatedstate = gsub("-"," ", state)
for(i in 2:50){
file = paste("http://www.stat.berkeley.edu/~nolan/data/Project2012/countyVotes2012/",state[i],".xml",sep="")
doc1 = xmlParse(file)
first = rbind(first,getPopulation(doc1, simpleCap(updatedstate[i])))
}
first = as.data.frame(first)
#doc2
doc201 = read.csv("http://www.stat.berkeley.edu/users/nolan/data/Project2012/census2010/B01003.csv")[1:7857,]
doc201 = doc201[-(199:259),]
names = as.character(unique(doc201$GEO.display.label))
rowsNeeded = numeric()
for(name in names){
rowNum = which(doc201$GEO.display.label == name)
rows = doc201[rowNum,]
if(length(rowNum) == 3){
if(rows$HD01_VD01[2] >= rows$HD01_VD01[3]){
num = rowNum[2]
}else{
num = rowNum[3]
}
}else if(length(rowNum) == 2){
num = rowNum[2]
}
rowsNeeded = c(rowsNeeded, num)
}
doc201 = doc201[rowsNeeded, ]
doc201 = subset(doc201, select = c("GEO.display.label","POPGROUP.display.label"))
doc201$GEO.display.label=as.character(doc201$GEO.display.label)
doc201$GEO.display.label[1773] = "Dona Ana County, New Mexico"
doc201$GEO.display.label = gsub("Parish", "County", doc201$GEO.display.label)
doc202 = read.csv("http://www.stat.berkeley.edu/users/nolan/data/Project2012/census2010/DP02.csv")
doc202 = doc202[-(68:96),3:ncol(doc202)] # no alaska
doc202 = doc202[,-(2:3)]
doc202$GEO.display.label = as.character(doc202$GEO.display.label)
doc202$GEO.display.label[1803-29-1] = "Dona Ana County, New Mexico"
doc202$GEO.display.label = gsub("Parish", "County", doc202$GEO.display.label)
NewNames = character()
for(name in colnames(doc202)){
if(name == "GEO.display.label"){
newName = name
}else{
newName = paste("household_", name, sep = "")
}
NewNames = c(NewNames, newName)
}
colnames(doc202) = NewNames
doc203 = read.csv("http://www.stat.berkeley.edu/users/nolan/data/Project2012/census2010/DP03.csv")[1:3139,] #no puerto
doc203 = doc203[-(68:96),3:ncol(doc203)] # no alaska
doc203 = doc203[,-(2:3)]
doc203$GEO.display.label = as.character(doc202$GEO.display.label)
doc203$GEO.display.label[1803-29-1] = "Dona Ana County, New Mexico"
doc203$GEO.display.label = gsub("Parish", "County", doc203$GEO.display.label)
NewNames = character()
for(name in colnames(doc203)){
if(name == "GEO.display.label"){
newName = name
}else{
newName = paste("employ_", name, sep = "")
}
NewNames = c(NewNames, newName)
}
colnames(doc203) = NewNames
second = merge(doc201, doc202, by.x = "GEO.display.label", by.y = "GEO.display.label")
second = merge(second, doc203, by.x = "GEO.display.label", by.y = "GEO.display.label")
colnames(second)[1] = "county"
#doc3
doc3 = xmlParse("http://www.stat.berkeley.edu/users/nolan/data/Project2012/counties.gml")
latitude = as.numeric(xpathSApply(doc3,"//gml:X",xmlValue))/1000000
long = as.numeric(xpathSApply(doc3,"//gml:Y",xmlValue))/1000000
county = xpathSApply(doc3,"/doc/state/county/gml:name",xmlValue)
county1 = xpathSApply(doc3,"//gml:name",xmlValue)
state = xpathSApply(doc3,"/doc/state/gml:name",xmlValue)
rept = numeric()
for(i in 1:length(state)){
if(i<length(state)){
rept = c(rept, which(state[i+1]==county1)-which(state[i]==county1)-1)
}else{
rept = c(rept, length(county1) - which(state[i]==county1))
}
}
state = gsub("\n   ","",state)
state = tolower(state)
state = sapply(state, simpleCap)
state = rep(state, rept)
county = gsub("\n    ","",county)
county = paste(county, ", ",sep = "")
county = paste(county, state, sep="")
county = gsub("Parish", "County", county)
third = data.frame("county"=county, "latitude"=latitude, "longitude"=long)
#merging 3 resources
combinedData = merge(first, second, by.x = "county", by.y = "county", all.x = T)
combinedData = merge(third, combinedData, by.x = "county", by.y = "county", all.y = T)
colnames(combinedData)[4] = "winParty12"
colnames(combinedData)[7] = "majorRace"
#STEP3
# Hao Huang worked on rpart() of step3, assisted by Shiyun Shao
# Qi Zhou leads the other two members worked on knn() of step3
# we all worked on manipulating 2004 data
data2004 = read.table("http://www.stat.berkeley.edu/~nolan/data/Project2012/countyVotes2004.txt")
#bush == GOP kerry == DEM
colnames(data2004) = c("countyName", "GOP", "DEM")
data2004 = data2004[-1,]
#manipulate county names
for(i in 1:nrow(data2004)){
row = data2004[i,]
countyColumn = as.character(data2004$countyName[i])
state = unlist(strsplit(countyColumn, "[,]"))[1]
c = unlist(strsplit(countyColumn, "[,]"))[2]
result = paste(simpleCap(c), " County, ", sep="")
result = paste(result, simpleCap(state), sep="")
data2004$NewCountyName[i] = result
}
#add winParty column
for(i in 1:nrow(data2004)){
row = data2004[i,]
if ( as.numeric(as.character(data2004$GOP[i])) >= as.numeric(as.character(data2004$DEM[i]))){
win = "GOP"
}else{
win = "DEM"
}
data2004$winParty[i] = win
}
data2004 = data2004[,-1]
data2004 = data2004[c(3,4,1,2)]
colnames(data2004) = c("county", "winParty04", "voteGOP04", "voteDEM04")
data04and12 = merge(data2004, combinedData, by.x = "county", by.y = "county", all.x = T)
data04and12 = data04and12[-2376,]
data04and12 = data04and12[-275,]
matrix = data04and12[complete.cases(data04and12),]
electionResult2012 = data.frame(matrix[,7])
colnames(electionResult2012) = "electionResult2012"
matrix = matrix[,-7]
matrixvote = matrix[,c(1,3,4,7,8)]
variables = c("county", "winParty04", "latitude", "longitude",
"household_HC03_VC134","household_HC03_VC94",
"household_HC03_VC168","household_HC03_VC40","household_HC03_VC18",
"employ_HC03_VC13","employ_HC03_VC75","employ_HC03_VC156",
"employ_HC03_VC166","employ_HC03_VC31","employ_HC03_VC59")
matrix = matrix[, variables]
colnames(matrix) = c("county", "winParty04", "latitude", "longitude",
"Foreign born",
"Education degree",
"Language",
"Divorced Males",
"Elders",
"Unemployed",
"Income",
"Poverty level all families",
"Poverty level all people",
"Commuting to Work",
"Job industry"
)
#rpart
matrix$winParty04 = as.factor(matrix$winParty04)
matrix = matrix[,-1]
rpartmodel = rpart(winParty04~., method = "class", data = matrix)
# quartz(width = 7, height = 7)
png("rpartplot1.png", width = 1500, height = 1000)
plot(rpartmodel, uniform=TRUE)
text(rpartmodel, use.n=TRUE, all=TRUE)
dev.off()
rpartSummary = summary(rpartmodel)
rpartpredicted = predict(rpartmodel)
#knn
knnpredicted = list()
for(i in 1:100){
knnpredicted[[i]] = knn(matrix[,2:ncol(matrix)], matrix[,2:ncol(matrix)], matrix$winParty04, k=i)
}
trueResult = as.vector(electionResult2012)
errs = numeric()
for(i in 1:100){
assess = table(knnpredicted[[i]], electionResult2012[,1])
errs[i] = (assess[1,2] + assess[2, 1]) / length(electionResult2012[,1])
}
#STEP4
#knnplot1
png("knnplot1.png", width = 1500, height = 1000)
plot(1:100, errs, pch = 19, cex =0.7, main = "KNN Errors from different K Value (1 to 100)",
xlab = "K Value", ylab = "KNN Errors")
dev.off()
#rpartImportance
png("rpartImportance.png", width = 1000, height = 800)
x = c(19,18,17,14,9,8,5,5,2,1,1,1,1)
barplot(x, xlab = "variable predictors", ylab = "importance", main = "Importance of rpart variable predictors", names.arg=c("var1", "var2","var3","var4","var5","var6","var7","var8","var9",
"var10","var11","var12","var13"), las = 1, space = 10, ylim = c(0, 20), col = "red")
text(100,19,"var1: Percent; COMMUTING TO WORK - Public transportation")
text(90,19-0.8,"var2: PERCENTAGE OF FAMILIES AND PEOPLE INCOME BELOW THE POVERTY LEVEL - All families")
text(100,19-0.8*2,"var3: latitude")
text(90,19-0.8*3,"var4: PERCENTAGE OF FAMILIES AND PEOPLE INCOME BELOW THE POVERTY LEVEL - All people")
text(100,19-0.8*4,"var5: Percent Unemployed")
text(100,19-0.8*5,"var6: Percent INCOME AND BENEFITS Less than $10,000")
text(100,19-0.8*6,"var7: longitude")
text(100,19-0.8*7,"var8: Percent bachelor's degree or higher")
text(100,19-0.8*8,"var9: Percent; LANGUAGE SPOKEN AT HOME other than English")
text(100,19-0.8*9,"var10: Percent; PLACE OF BIRTH - Foreign born")
text(100,19-0.8*10,"var11: Percent; Households with one or more people 65 years and over")
text(100,19-0.8*11,"var12: Percent; INDUSTRY - Educational services, and health care and social assistance")
text(100,19-0.8*12,"var13: Percent; Divorced - Males 15 years and over")
dev.off()
#plot3
predictedresult = character(2808)
for(i in 1:nrow(rpartpredicted)){
if(rpartpredicted[i,1] > rpartpredicted[i,2]){
predictedresult[i] = "DEM"
}else{
predictedresult[i] = "GOP"
}
}
rparterror = 1 - sum(trueResult == predictedresult)/2808
#fancy plot
matrixvote[,2:5] = apply(matrixvote[,2:5], 2, as.numeric)
GOPdiff = (matrixvote$voteGOP12 - matrixvote$voteGOP04) / matrixvote$voteGOP04
DEMdiff = (matrixvote$voteDEM12 - matrixvote$voteDEM04) / matrixvote$voteDEM04
resultdiff = data.frame(1:nrow(matrixvote),1:nrow(matrixvote))
colnames(resultdiff) = c("winParty", "diff")
for(i in 1:nrow(matrixvote)){
if(abs(GOPdiff[i]) > abs(DEMdiff[i])){
resultdiff$diff[i] = GOPdiff[i]
resultdiff$winParty[i] = "GOP"
}else{
resultdiff$diff[i] = DEMdiff[i]
resultdiff$winParty[i] = "DEM"
}
}
resultdiff = cbind(matrixvote$county, resultdiff, matrix[,2:3])
png("fancyplot.png", width = 1500, height = 1000)
map(database = "usa", col="grey", fill = T, myborder = 0)
map(database = "state", col="grey", fill = T, myborder = 0)
map(database = "county", col="grey", fill = T, myborder = 0)
angle = resultdiff$diff * 65
angle[which(resultdiff$diff < 0)] = resultdiff$diff[which(resultdiff$diff < 0)] * 108
arlength = abs(resultdiff$diff * 2.4)
arlength[which(resultdiff$diff < 0)] = abs(resultdiff$diff[which(resultdiff$diff < 0)] * 3.8)
hlength = numeric()
hlength[which(arlength >2)] = 0.09
hlength[which(arlength >1 & arlength < 2)] = 0.07
hlength[which(arlength < 1)] = 0.05
x1 = resultdiff$latitude + cos(angle*0.01745)*(arlength)
y1 = resultdiff$longitude + sin(angle*0.01745)*(arlength)
arcol = character()
arcol[which(resultdiff$winParty == "DEM")] = "red"
arcol[which(resultdiff$winParty == "GOP")] = "blue"
arrows(resultdiff$latitude, resultdiff$longitude, x1, y1, length = 0.09, cex =0.1, col = arcol, lwd = 2)
dev.off()
